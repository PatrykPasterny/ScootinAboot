// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	redis "github.com/redis/go-redis/v9"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetScooterAvailability mocks base method.
func (m *MockRedisRepository) GetScooterAvailability(scooterUUID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterAvailability", scooterUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterAvailability indicates an expected call of GetScooterAvailability.
func (mr *MockRedisRepositoryMockRecorder) GetScooterAvailability(scooterUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterAvailability", reflect.TypeOf((*MockRedisRepository)(nil).GetScooterAvailability), scooterUUID)
}

// GetScooterLocation mocks base method.
func (m *MockRedisRepository) GetScooterLocation(scooterUUID uuid.UUID, city string) (*redis.GeoPos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterLocation", scooterUUID, city)
	ret0, _ := ret[0].(*redis.GeoPos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterLocation indicates an expected call of GetScooterLocation.
func (mr *MockRedisRepositoryMockRecorder) GetScooterLocation(scooterUUID, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterLocation", reflect.TypeOf((*MockRedisRepository)(nil).GetScooterLocation), scooterUUID, city)
}

// GetScooters mocks base method.
func (m *MockRedisRepository) GetScooters(longitude, latitude, radius float64, city string) ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooters", longitude, latitude, radius, city)
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooters indicates an expected call of GetScooters.
func (mr *MockRedisRepositoryMockRecorder) GetScooters(longitude, latitude, radius, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooters", reflect.TypeOf((*MockRedisRepository)(nil).GetScooters), longitude, latitude, radius, city)
}

// UpdateScooterAvailability mocks base method.
func (m *MockRedisRepository) UpdateScooterAvailability(scooterUUID uuid.UUID, availability bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterAvailability", scooterUUID, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterAvailability indicates an expected call of UpdateScooterAvailability.
func (mr *MockRedisRepositoryMockRecorder) UpdateScooterAvailability(scooterUUID, availability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterAvailability", reflect.TypeOf((*MockRedisRepository)(nil).UpdateScooterAvailability), scooterUUID, availability)
}

// UpdateScooterLocation mocks base method.
func (m *MockRedisRepository) UpdateScooterLocation(scooter *redis.GeoLocation, city string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterLocation", scooter, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterLocation indicates an expected call of UpdateScooterLocation.
func (mr *MockRedisRepositoryMockRecorder) UpdateScooterLocation(scooter, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterLocation", reflect.TypeOf((*MockRedisRepository)(nil).UpdateScooterLocation), scooter, city)
}
