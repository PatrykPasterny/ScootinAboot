// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scootinAboot/internal/module/redis/model"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	redis "github.com/redis/go-redis/v9"
)

// MockRedisService is a mock of RedisService interface.
type MockRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisServiceMockRecorder
}

// MockRedisServiceMockRecorder is the mock recorder for MockRedisService.
type MockRedisServiceMockRecorder struct {
	mock *MockRedisService
}

// NewMockRedisService creates a new mock instance.
func NewMockRedisService(ctrl *gomock.Controller) *MockRedisService {
	mock := &MockRedisService{ctrl: ctrl}
	mock.recorder = &MockRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisService) EXPECT() *MockRedisServiceMockRecorder {
	return m.recorder
}

// GetScooters mocks base method.
func (m *MockRedisService) GetScooters(longitude, latitude, radius float64, city string) ([]*model.RedisScooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooters", longitude, latitude, radius, city)
	ret0, _ := ret[0].([]*model.RedisScooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooters indicates an expected call of GetScooters.
func (mr *MockRedisServiceMockRecorder) GetScooters(longitude, latitude, radius, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooters", reflect.TypeOf((*MockRedisService)(nil).GetScooters), longitude, latitude, radius, city)
}

// UpdateScooter mocks base method.
func (m *MockRedisService) UpdateScooter(scooter *model.RedisScooter, city string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooter", scooter, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooter indicates an expected call of UpdateScooter.
func (mr *MockRedisServiceMockRecorder) UpdateScooter(scooter, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooter", reflect.TypeOf((*MockRedisService)(nil).UpdateScooter), scooter, city)
}

// UpdateScooterAvailability mocks base method.
func (m *MockRedisService) UpdateScooterAvailability(scooterUUID uuid.UUID, availability bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterAvailability", scooterUUID, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterAvailability indicates an expected call of UpdateScooterAvailability.
func (mr *MockRedisServiceMockRecorder) UpdateScooterAvailability(scooterUUID, availability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterAvailability", reflect.TypeOf((*MockRedisService)(nil).UpdateScooterAvailability), scooterUUID, availability)
}

// UpdateScooterLocation mocks base method.
func (m *MockRedisService) UpdateScooterLocation(scooter *redis.GeoLocation, city string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterLocation", scooter, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterLocation indicates an expected call of UpdateScooterLocation.
func (mr *MockRedisServiceMockRecorder) UpdateScooterLocation(scooter, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterLocation", reflect.TypeOf((*MockRedisService)(nil).UpdateScooterLocation), scooter, city)
}
