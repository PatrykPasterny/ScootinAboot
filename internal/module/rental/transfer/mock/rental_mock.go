// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scootinAboot/internal/module/rental/model"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRentalService is a mock of RentalService interface.
type MockRentalService struct {
	ctrl     *gomock.Controller
	recorder *MockRentalServiceMockRecorder
}

// MockRentalServiceMockRecorder is the mock recorder for MockRentalService.
type MockRentalServiceMockRecorder struct {
	mock *MockRentalService
}

// NewMockRentalService creates a new mock instance.
func NewMockRentalService(ctrl *gomock.Controller) *MockRentalService {
	mock := &MockRentalService{ctrl: ctrl}
	mock.recorder = &MockRentalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentalService) EXPECT() *MockRentalServiceMockRecorder {
	return m.recorder
}

// Free mocks base method.
func (m *MockRentalService) Free(scooterUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free", scooterUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockRentalServiceMockRecorder) Free(scooterUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockRentalService)(nil).Free), scooterUUID)
}

// Rent mocks base method.
func (m *MockRentalService) Rent(scooter *model.RentalScooter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rent", scooter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rent indicates an expected call of Rent.
func (mr *MockRentalServiceMockRecorder) Rent(scooter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rent", reflect.TypeOf((*MockRentalService)(nil).Rent), scooter)
}
